[["index.html", "The Joy of Data Visualization About", " The Joy of Data Visualization Kirby D. White 2021-12-29 About This is text where we can test hoverhover text for a test "],["resources.html", "Resources 0.1 Data Repositories", " Resources 0.1 Data Repositories These sites contain numerous data files which can be very useful for practicing all sorts of technology skills. This is a living list (meaning it will be updated as I learn more) and are in no particular order: Google Public Data Kaggle Datasets Eastern Michigan University Data Directory UCI Machine Learning Repository "],["why-data-visualization.html", "Chapter 1 Why Data Visualization 1.1 History of Data Visualization 1.2 Our Brains Want It 1.3 Key Resources and Inspiration", " Chapter 1 Why Data Visualization Why does data need to be visualized? 1.1 History of Data Visualization William Playfair, etc. 1.2 Our Brains Want It The brain has a lot of muscle for receiving and interpreting spatial information. Conversely, your brain has almost no ability to readily read, understand, and generate new questions about a bland table of numbers  even small ones. (show table and scatter plot to demonstrate) 1.3 Key Resources and Inspiration Tableau Gallery Storytelling With Data Learning To See Data by Ben Jones, Co-Founder &amp; CEO at Data Literacy The Visual Display of Quantitative Data by Edward Tufte Better Data Visualizations by Jonathan Schwabish, Senior Fellow at the Urban Institute R Graphics Cookbook How Charts Lie, by Alberto Cairo Statistics Globe "],["getting-started.html", "Chapter 2 Getting Started 2.1 Interactive and Replicable 2.2 Developer Environments and Programming Languages 2.3 Book Organization", " Chapter 2 Getting Started There are a few tools youll need to install to take full advantage of this book. Im assuming that most readers will have already had at least a brief introduction to R and/or Python. If you are completely brand new to the topic, I suggest starting with books or online courses designed to teach the fundamental skills 2.1 Interactive and Replicable This book is intended to provide replicable code for reproducing most examples in R and Python. In R, the primary graphing libraries are ggplot and plotly. In Python, the primary graphing libraries are seaborn and matplotlib. Throughout this book, youll find mini-apps that let you look under the hood to see the exact code used to create an example, like this: 2.2 Developer Environments and Programming Languages Many data scientists and analysts write their code in an integrated development environment (IDE). An IDE is a software program that brings a suite of useful tools and capabilities to help write code more quickly and easily. RStudio is an IDE designed for data science applications. It is optimized for R, but also has features for working with other languages such as Python, SQL, Bash, and more. You can download a free version of RStudio, here: https://www.rstudio.com/products/rstudio/download/. Another common IDE for Python is Jupyter labs, which is a browser-based platform commonly used for R and Python. As a browser-based application, it can be much faster to get started because you dont (usually) have to install anything on your computer. You can learn more and start using this platform at https://jupyter.org/. This book primarily uses the R and Python programming languages. They are both open-source, meaning that they are fully and freely available to anyone and that thousands of people have contributed to their development over time. This has some advantages, such as the rapid pace of feature development and nearly constant updates to work with new technology and research techniques. Nearly every situation or problem you encounter has been solved by somebody who has shared a solution. There are also some disadvantages to such rapid development, such as the possibility that this book may become obsolete much faster than a closed-source application would! You can download R from https://www.r-project.org/, and you can download Python from https://www.python.org/downloads/. This book makes heavy use of these packages/libraries for each language: R tidyverse (which is a suite of other packages, such as ggplot2 and tidyr) plotly Python pandas matplotlib seaborn 2.3 Book Organization This book is designed to primarily offer practical examples and replicable code to create data visualizations. Youre welcome to jump straight to a chapter or section without reading anything else in the book. "],["anatomy-of-data.html", "Chapter 3 Anatomy of Data 3.1 What is data? What is information? 3.2 Where does data come from? 3.3 What are the types of data? 3.4 How do we visualize data? 3.5 How does the computer store data?", " Chapter 3 Anatomy of Data 3.1 What is data? What is information? 3.2 Where does data come from? All around you! 3.3 What are the types of data? There are several frameworks to describe different types of data. The Stevens Typology (Stevens, 1946) is the most common among social scientists, so Ill use its language throughout this book. Stevens describes four types of data: Ratio (salary in USD, height in inches, etc.) Interval (attitude scales, Celsius and Fahrenheit, etc.) Ordinal (strongly agree &gt; strongly disagree, Freshmen &lt; Senior, etc.) Nominal (job title, country of birth, etc.) These characteristics of data are the bedrock for all visualizations. Most graphs only work with certain types of data, so being able to identify these properties in your data will help you more quickly understand the myriad ways you can represent it visually. Lets go into a little more detail about each type. Nominal data has no known magnitude or rank order. For instance, we might look at the GDP for a group of countries. Country is a nominal collection of data because the country names simply indicate that the countries are different from one another. Other examples: College degree (psychology, business, literature, etc.) Colors (red, green, etc.) Vehicle manufacturers (Tesla, Audi, Mercedes, etc.) Ordinal data has an unknown magnitude but a known rank order. Consider a marathon where each runner is given a rank once they finish. We know that the runner who came in first place had a better time than the runner in second place, but we dont know how much faster they were. Were they twice as fast? Only one second faster? We dont know, and thats what makes this data ordinal. Other examples: Agreement scales (strongly disagree &lt; strongly agree) Job seniority (CEO &gt; vice president &gt; manager) Academic grades (A &gt; B &gt; C) Nominal and ordinal data can be called categorical data because they primarily depict different categories. Our next two, interval and ratio, are continuous types of data, because they contain values that be anywhere within a given range. Interval data has a known magnitude and rank order. The Celsius temperature scale is a common example of this, with the range from 0 to 100 degrees providing an even gradient to express the amount of heat. We know that 35 is more than 28.5, and that the difference is 6.5 units. Other examples where interval data might be collected: Happiness scales Job satisfaction surveys Personality tests Ratio data has a known magnitude and rank order, just like interval data. The difference between these two is that interval data does not have a meaningful zero value, but ratio does. When the temperature reaches 0 degrees (in Celsius), does that mean that there is no temperature? Of course not! The 0 in Celsius is a useful baseline for us in our day-to-day lives, but it isnt an accurate expression of how quickly a group molecules are vibrating. However, the Kelvin temperature scale was intentionally designed to be a ratio scale, which is why 00 degrees Kelvin is called absolute zero and indicates the complete absence of temperature. Here are a few other examples you might come across: * Salary (in dollars) * # Products sold * miles per hour Most people struggle to spot the differences between ratio and interval data, and thats okay. It rarely matters for visualizing data, but can be important for other types of data analytics, which is why its worth mentioning. There are also some data that can move between categories, such as time or geospatial data. Well cover these in more detail in the examples in a later chapter. The kinds of charts you can build depend on the type of data you want to visualize. This table gives a (non-exhaustive) sampling of the plots that might work for each combination of two variables: Variable 1 Variable 2 Possible Graphs Nominal Nominal Chord diagram Nominal Ordinal Stacked barplot Nominal Interval Spider plot Nominal Ratio Jitter plot Ordinal Ordinal Heatmap Ordinal Interval Boxplot Ordinal Ratio Barplot Interval Interval Lineplot Interval Ratio Scatterplot Ratio Ratio Area Chart Generally speaking, these four data types are fundamental for understanding the phenomena you wish to represent and the options available for visualizing them. There are, of course, exceptions and special cases that dont fit neatly into this framework, which is why some academic fields may use a modified or completely different framework altogether. However, for most purposes, the Stevens typology works well enough. However, there are some common visualizations that use data in a way that I think deserves their own categories, even though they can (strictly speaking) be placed into one of Stevens four types. These are: Period Duration Flow Period and duration data are both used to represent aspects of time. You can think of it as a time period (e.g., January 1, 2020 - June 30, 2020) and a duration of time (e.g., 4 hours 32 minutes and 18 seconds). Very often, period and duration data needs to be derived from a source of raw data, rather than being stored on its own. Consider a shipping company that is tracking the progress of several trucks in its fleet as they make deliveries. They can very easily log progress with a table like this: Truck ID Status Time 123 Departure 2020-03-05 08:17:42 456 Departure 2020-03-05 08:22:06 789 Departure 2020-03-05 08:23:58 456 Arrival 2020-03-05 09:14:33 123 Arrival 2020-03-05 10:02:56 789 Arrival 2020-03-05 10:27:44 By storing raw data as precise timestamps, they will always be able to aggregate their records into other useful information, such as: How long did it take 123 to arrive at its destination? What is the average trip length? How many trips took longer than 1 hour? and many more! Flow data is simple to store but represents the complex movements of a stock, which is just an amount of something. This can be used to create stock and flow diagrams to portray the process of movement, or Sankey diagrams to portray the proportions of movement. Here is a simple example of a stock and flow chart: Stock and Flow diagrams model the movement of a stock and the variables affecting it. These emphasize the mechanics and process of the flow, rather than the amounts currently flowing. Relatedly, a Sankey diagram emphasizes the quantities of flow during a given time period. This Sankey diagram shows the (completely fictional) flow of students through university. They apply as high-school or transfer students, select a major, and graduate or not: Figure 3.1: Sankey diagrams depict the sources and flow of a stock, as well as the proportions of their values. You are probably already familiar with a flow chart. These charts are visual depictions of a decision making process, and are rarely (in my experience, anyways) connected to a raw data source. Nonetheless, they are an excellent way to communicate natural phenomena or other processes. These will be covered in chapter [###]. Well cover the code to create Sankey diagrams later on. 3.4 How do we visualize data? We create a graph of data by encoding the values into various visual properties, such as: Color Length/Width Area Text Angle Position And more! Data visualization is the final step in a process of encoding natural phenomena into data and then translating data into visual properties. It seems simple, but these visual properties are the fundamentals of all data visualization. Check out this little simulation to see how these properties change with your data: Information is always lost in translation, and data visualization is no exception. Sometimes, we fail to capture important information about the phenomena into the data we store. For instance, you may have taken an employee experience survey that asked you to rate your job satisfaction on a scale from 1 to 10 (highest). The data we capture is incredibly simple (an integer between 1 and 10), but your holistic experience on the job is rich and nuanced and detailed and diverse! A great deal of information about the phenomena were interested in is not captured with this question. That doesnt mean its a bad question, only that theres a gap between the reality of the phenomena and the data weve captured. We could ask the same question, but instead of requiring a numeric response, allow the employee to write a text response. This would certainly capture more information about their true experience, but this type of data is much more complex to work with and derive insights from. In this way, the data we capture is the first (and usually biggest) limitation on our ability to understand the world around us. Other times, our visualizations fail to capture meaningful aspects of our data (and thus, the phenomena itself). After surveying 100 employees, we might use a bar plot to show that the average job satisfaction score is 9.2 out of 10. Yahoo! But the average score of all 100 employees is only one piece of information, and we might have several other questions: What was the lowest and highest scores? Did the scores vary by work team? Have scores gone up or down over time? How do these scores compare to other similar companies? And so on. Generally speaking, more information is lost during the translation from reality to data than from data to visualization. Gathering data which faithfully and fully represents natural phenomena is difficult, tedious, and complex. Scientists spend years learning about a particular category of phenomena (medicine, biology, psychology, etc.) and being trained in the methods to capture meaningful data related to their discipline. This book mostly deals with the second phase of translation: data to visualization. It contains numerous examples of visualization techniques, describes the terminology and proper usage of various charts and graphs, and provides the statistical code to reproduce the examples in the R programming language. 3.5 How does the computer store data? Unfortunately, its unlikely that youll actually encounter something labeled as ratio or ordinal data. Those terms help you think about what kind of phenomena is represented by the data, not how the data is being stored in the computer. When you have a dataset in R, you can see how the computer is storing each column using the str(name_of_object) command. Here are the most common storage types and their (likely) counterpart in the Stevens typology: Ratio and Interval num (numeric) int (integer) dbl (double-point floating precision number) Ordinal Ord. Factor (Ordered Factor) int (Integer) chr (character string) logical (true or false) Nominal * Factor (Factor) * chr (character string) * logical (true or false) "],["graphical-zoo.html", "Chapter 4 Graphical Zoo 4.1 Comparing Multiple Categories 4.2 Time-Series Graphics 4.3 Statistical/Distribution Insights 4.4 Geographic and Spatial Data 4.5 Relationships Between Variables 4.6 Flows and Nested Data 4.7 Famous Visualizations", " Chapter 4 Graphical Zoo This chapter serves as a menagerie of different types of visualization. My intention is to quickly let you see a variety of chart types, point out their encoding mechanisms, and help you become more familiar with the role of data types and why they are so fundamental to visualization (even though it seems very boring). The graphics are arranged into categories based on their primary purpose or features, and not necessarily their similarity. For instance, histograms and bar charts can look nearly identical but have radically different purposes. Each category serves as the basis for the majority of the chapters in this book, which is where you can find additional examples, reproducible code snippets, common misinterpretations or ways to abuse a chart, and possibly the history of each chart or anecdotes about their famous (or infamous) uses! 4.1 Comparing Multiple Categories 4.1.1 Bar Charts Bar charts are one of the most fundamental graphs. They always have at least one categorical (i.e., either nominal or ordinal) and one continuous (i.e., interval or ratio) variable. The categorical variable is encoded in the position of each bar. It can help your audience understand the chart better if you put some thought into the order of the bars. If your categorical variable is ordinal (e.g., small, medium, large) then it probably makes sense to ensure that the bars are also in that order. If your variable is nominal, the order may not matter at all, or youll want to order them by the value of their corresponding continuous value, perhaps in ascending or descending order. This example comes from a dataset of jewelry sales, specifically diamonds. Each diamond is graded based on the quality of its cut (ordinally, from fair to ideal) and has a sale price. When we calculate the average price for each quality grade, we can visualize it with this bar chart: Bar charts can contain more than the two required variables. For instance, this bar chart displays the price of diamonds by cut quality (ordinal) and color clarity (ordinal), and is technically called a grouped bar chart. We make a separate bar for each combination of cut and clarity. The bars are grouped together based on their cut, and put in order of their clarity. The groups are also in order of cut quality. Notice that clarity is encoded two ways: with bar position and with color. The addition of color means that we can avoid printing the label for each clarity over and over again, which would add a lot of clutter to the graph. Another common variant of a bar chart is the stacked bar chart. Like the grouped bar chart, it also requires multiple categorical variables and one continuous variable. Using the same data, we can use a stacked bar chart to examine how often each clarity of diamond is cut into each quality grade. In this case, we are simply counting the number of times each combination appears and using that as our continuous variable. This type of chart emphasizes how many diamonds are in each cut quality, but the differing total sizes makes it more difficult to identify the proportions of clarity within each cut. We can change the emphasis with a 100% stacked bar chart, which makes it much easier to see the proportions within each group, but hides the total size of each group. Lets take a look: 4.1.2 Marimekko Charts Marimekko charts are similar to bar charts, but require two continuous variables instead of just one, and still require (at least) one categorical variable. At its simplest, a Marimekko chart is a bar chart that also encodes one continuous variable into the width of each bar, rather than keeping them consistent widths. Take a look at this example to see how we can use two continuous variables in a bar chart: This makes it easy for your viewers to infer a third variable (population density) from the display. For instance, it becomes immediately obvious that Delaware is the most densely populated state while Alaksa is the least. Just for fun, lets also encode a third continuous variable into this graph. Well encode the median per-capita-income into the color of each bar: While its relatively easy to create a graphic like this, it may not be wise. It is probably too much information for a viewer to readily receive and interpret, thus slowing down their ability to identify important insights or generating new questions. 4.1.3 Heatmaps Heatmaps are usually used to quickly identify high and low values by using hotter and cooler colors. They require at least one categorical and one continuous variable, but very often use two categorical variables. Sometimes the frequency count of each combination of categorical variables acts as the continuous variable, like this example showing how frequently diamonds of a given clarity are cut to a given quality: Here, the frequency count of each combination is encoded into the color of each square. The large contrast in colors make it immediately clear that the most frequently occurring combination is Ideal and VS2 diamonds. 4.1.4 Radar Charts Radar charts are a great way to plot several categorical variables, potentially across several groups, each with a corresponding continuous value. Imagine we have a table of a students grades in several classes: Student ID Class 123 Business 123 Psychology 123 English 123 Math 123 Science We could encode each class in a different location around a circular axis, and then encode each grade with a dot somewhere along the length of the axis. When we connect the dots and fill in the area, it looks like this: These charts have a variety of other names such as polar charts, web charts, spider charts. 4.1.5 Dot Plots Dot plots are simple to understand and very flexible with the types of data they accept. At its simplest, they require one continuous variable and one categorical variable with at least two levels (i.e., options). Lets plot the median incomes (in 1975) for two states in the USA: 4.1.6 Gauge and Bullet Charts 4.1.7 Waterfall Charts 4.2 Time-Series Graphics 4.2.1 Waterfall Charts (again) 4.2.2 Line Charts 4.2.3 Area Charts 4.2.4 Gantt Charts 4.3 Statistical/Distribution Insights 4.3.1 Histograms 4.3.2 Box Plots 4.3.3 Violin Charts 4.3.4 Rainclouds 4.3.5 Candlestick Charts 4.3.6 Stem-and-Leaf Plots 4.3.7 Principal Components 4.3.8 Scree Plots 4.3.9 Multivariate Plots Not sure this is a thing, but I want to look into it 4.4 Geographic and Spatial Data 4.4.1 Choropleth 4.4.2 Dot Density 4.5 Relationships Between Variables 4.5.1 Scatterplots Scatterplots are another fundamental type of chart to understand. At their simplest, they display the information of two continuous variables. Critically, the values of each variable are displayed as pairs, meaning that each set of values should belong to the same unitA unit can be anything: a person, a business, a location, etc. Each pair of continuous values must belong to the same unit. Heres a simple scatterplot of employee attitudes about their work department. Each dot represents a different department (the unit), and the values of each variable are encoded in the position of the dot. The value of each variable is the average number of favorable responses employees within each department gave when asked a particular question, such as, How do you feel about your opportunities to advance within this department? That variable is encoded in the vertical position of each dot. That is, dots with a higher position indicate more favorable responses than dots with a lower position. The other variable is encoded in the horizontal position of each dot, with higher values being indicated by a position farther to the right. This is the first relational plot because it is primarily intended to examine for the presence of a relationship between the two chosen variables. In this example, someone could argue that employees who are able to learn more skills are more valuable to their employer and are thus more likely to receive a promotion. If you agree with that logic, then youd expect to see a relationship between these variables, such that departments that are high in one variable are probably high in the other. In fact, this relationship can be emphasized by adding a line of best fit through the dots, like this: This line has been drawn in such a way that it is as close as possible to every dot in the display. It trends upwards and to the right, indicating that as one variable increases you should also expect the other to increase. There are a significantget it? number of statistical methods to identify whether the portrayed relationship is truly their or is simply spuriousmeaning that its random or without merit. Scatterplots can easily accomodate the addition of a categorical variable to investigate relationships across groups. Take a look at this graph showing the relationship between petal length and sepal length of irises, a type of flower: This makes it clear that theres a relationship between the two features, but lets see what happens when we encode the sub-species of each plant into the dots colors: By the way, if youre like me and dont remember anything from your biology classes, heres what petals and sepals are: 4.5.2 Bubble Charts Bubble charts are a variant of the scatterplot that incorporate a third continuous variable, which is encoded into the size of each dot. Heres a bubble chart primarily showing the illiteracy and high school graduation rates in each state in the USA. The median income is encoded into the size of each dot, such that states with higher incomes are shown with larger dots: When using multiple encodings to display multiple variables, it becomes critically important to consider which variables to encode with each visual property. Why did I choose to make the area of each dot proportional to income, and not the illiteracy rates? Why did I choose to use area rather than a color gradient? These questions are primarily answered by the information contained in {chapter on encoding precision}. 4.5.3 Correlation Matrix 4.5.4 Parallel Coordinates 4.6 Flows and Nested Data 4.6.1 Pie Charts 4.6.2 Funnel/Pyramid Charts 4.6.3 Treemap 4.6.4 Chord/Arc Diagram Chord and Arc diagrams are one type of network diagram, which will be further explored soon. These diagrams really require only two categorical variables, but they must be paired together so that one variable is the source and to the others target or destination. For instance, if you were to map your movements in the day, it might look something like this: Source Target Home School School Home Home Gym Gym Home Home Restaurant Restaurant Movie Movie Home Notice that these might be in a chronological order, but that the ordering of stops isnt displayed in this chord diagram of your movements: This can be confusing to interpret at first, but its a clever way of showing the movements. Each location (a source or target) is given a bar around the edge of a circle. Then, chords are drawn between locations that were connected by your movements at some point. The width of the chord is proportional to the number of connections between the two locations. If the two ends of a chord are equal widths, this tells you that those locations were the source and target an equal number of times. If a chord is wider at one end than the other, then the location at the wider end was the source more often than the target. 4.6.5 Network Diagram 4.6.6 Tree Diagram 4.6.7 Sunburst 4.7 Famous Visualizations 4.7.1 Nightingale Plot 4.7.2 Napoleans March 4.7.3 John Snows Cholera Outbreak 4.7.4 Election Maps (Trumps vs Clintons) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
