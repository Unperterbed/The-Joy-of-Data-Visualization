rt <-
rt +
theme(panel.grid.major.x = eval(xline),
panel.grid.minor.x = eval(xline),
panel.grid.major.y = eval(yline),
panel.grid.minor.y = eval(yline))
}
return(rt)
}
p +
theme_kirby(
base_theme = theme_minimal(),
grid = "none",
legend = "none"
)
str(element_line)
p +
theme_minimal()+
theme(panel.grid.major.x = xline,
panel.grid.minor.x = element_blank())
p +
theme_minimal()+
theme(panel.grid.major.x = eval(xline),
panel.grid.minor.x = element_blank())
p +
theme_minimal()+
theme(panel.grid.major.x =parse(text = xline),
panel.grid.minor.x = element_blank())
parse(text = xline)
eval(parse(text = xline))
p +
theme_minimal()+
theme(panel.grid.major.x = eval(parse(text = xline)),
panel.grid.minor.x = eval(parse(text = xline)))
theme_kirby <- function(base_theme = ggplot2::theme_get(), legend = "right", aspect = NULL, grid = "none"){
rt <- base_theme
if(legend %in% c("none", "left", "right", "bottom", "top")){
rt <-
rt +
theme(legend.position = legend)
}
if(grid %in% c("none", "x-only", "y-only", "both")){
xline <-
case_when(grid == "none" ~ 'element_blank()',
grid == "x-only" | grid == "both"~ 'element_line(color = "black", size = 1, linetype = "solid")')
yline <-
case_when(grid == "none" ~ element_blank(),
grid == "y-only" | grid == "both" ~ element_line(color = "black", size = 1, linetype = "solid"))
rt <-
rt +
theme(panel.grid.major.x = eval(parse(text = xline)),
panel.grid.minor.x = eval(parse(text = xline)),
panel.grid.major.y = eval(parse(text = yline)),
panel.grid.minor.y = eval(parse(text = yline)))
}
return(rt)
}
theme_kirby <- function(base_theme = ggplot2::theme_get(), legend = "right", aspect = NULL, grid = "none"){
rt <- base_theme
if(legend %in% c("none", "left", "right", "bottom", "top")){
rt <-
rt +
theme(legend.position = legend)
}
if(grid %in% c("none", "x-only", "y-only", "both")){
xline <-
case_when(grid == "none" ~ 'element_blank()',
grid == "x-only" | grid == "both"~ 'element_line(color = "black", size = 1, linetype = "solid")')
yline <-
case_when(grid == "none" ~ 'element_blank()',
grid == "y-only" | grid == "both" ~ 'element_line(color = "black", size = 1, linetype = "solid")')
rt <-
rt +
theme(panel.grid.major.x = eval(parse(text = xline)),
panel.grid.minor.x = eval(parse(text = xline)),
panel.grid.major.y = eval(parse(text = yline)),
panel.grid.minor.y = eval(parse(text = yline)))
}
return(rt)
}
p +
theme_kirby(
base_theme = theme_minimal(),
grid = "none",
legend = "none"
)
p +
theme_kirby(
base_theme = theme_minimal(),
grid = "x-only",
legend = "none"
)
grid <- "x-only"
xline <-
case_when(grid == "none" ~ 'element_blank()',
grid == "x-only" | grid == "both"~ 'element_line(color = "black", size = 1, linetype = "solid")')
yline <-
case_when(grid == "none" ~ 'element_blank()',
grid == "y-only" | grid == "both" ~ 'element_line(color = "black", size = 1, linetype = "solid")')
yline <-
case_when(grid == "none" | grid == "x-only" ~ 'element_blank()',
grid == "y-only" | grid == "both" ~ 'element_line(color = "black", size = 1, linetype = "solid")')
theme_kirby <- function(base_theme = ggplot2::theme_get(), legend = "right", aspect = NULL, grid = "none"){
rt <- base_theme
if(legend %in% c("none", "left", "right", "bottom", "top")){
rt <-
rt +
theme(legend.position = legend)
}
if(grid %in% c("none", "x-only", "y-only", "both")){
xline <-
case_when(grid == "none"  | grid == "y-only" ~ 'element_blank()',
grid == "x-only" | grid == "both"~ 'element_line(color = "black", size = 1, linetype = "solid")')
yline <-
case_when(grid == "none" | grid == "x-only" ~ 'element_blank()',
grid == "y-only" | grid == "both" ~ 'element_line(color = "black", size = 1, linetype = "solid")')
rt <-
rt +
theme(panel.grid.major.x = eval(parse(text = xline)),
panel.grid.minor.x = eval(parse(text = xline)),
panel.grid.major.y = eval(parse(text = yline)),
panel.grid.minor.y = eval(parse(text = yline)))
}
return(rt)
}
p +
theme_kirby(
base_theme = theme_minimal(),
grid = "x-only",
legend = "none"
)
p +
theme_kirby(
base_theme = theme_minimal(),
grid = "y-only",
legend = "none"
)
p +
theme_kirby(
base_theme = theme_minimal(),
grid = "both",
legend = "none"
)
theme_kirby <- function(base_theme = ggplot2::theme_get(), legend = "right", aspect = NULL, grid = "none"){
rt <- base_theme
if(legend %in% c("none", "left", "right", "bottom", "top")){
rt <-
rt +
theme(legend.position = legend)
}
if(grid %in% c("none", "x-only", "y-only", "both")){
xline <-
case_when(grid == "none"  | grid == "y-only" ~ 'element_blank()',
grid == "x-only" | grid == "both"~ 'element_line(color = "gray", size = .5, linetype = "solid")')
yline <-
case_when(grid == "none" | grid == "x-only" ~ 'element_blank()',
grid == "y-only" | grid == "both" ~ 'element_line(color = "gray", size = .5, linetype = "solid")')
rt <-
rt +
theme(panel.grid.major.x = eval(parse(text = xline)),
panel.grid.minor.x = eval(parse(text = xline)),
panel.grid.major.y = eval(parse(text = yline)),
panel.grid.minor.y = eval(parse(text = yline)))
}
return(rt)
}
p +
theme_kirby(
base_theme = theme_minimal(),
grid = "both",
legend = "none"
)
shiny::runApp('EncodingExamples')
runApp('EncodingExamples')
as.integer(format(Sys.Date(), "%Y"))
as.integer(format(Sys.Date(), "%Y"))-2
lubridate::year(Sys.Date())
lubridate::year(Sys.Date())-2
diamonds %>%
count(cut, clarity)
diamonds %>%
count(cut, clarity) %>%
ggplot(aes(x=cut))+
geom_col(aes(y=n, fill = "cut"))
diamonds %>%
count(cut, clarity) %>%
pivot_wider(id_cols = "cut")
diamonds %>%
count(cut, clarity) %>%
pivot_wider(names_from = 'clarity', values_from = 'n')
ggplot(aes(x=cut))+
geom_col(aes(y='SI2', fill = "cut"))
diamonds %>%
count(cut, clarity) %>%
pivot_wider(names_from = 'clarity', values_from = 'n') %>%
ggplot(aes(x=cut))+
geom_col(aes(y='SI2', fill = "cut"))
diamonds %>%
count(cut, clarity) %>%
pivot_wider(names_from = 'clarity', values_from = 'n') %>%
ggplot(aes(x=cut))+
geom_bar(aes(y='SI2', fill = "cut"))
diamonds %>%
count(cut, clarity) %>%
pivot_wider(names_from = 'clarity', values_from = 'n') %>%
ggplot(aes(x=cut))+
geom_col(aes(y='SI2', fill = "cut"))
diamonds %>%
count(cut, clarity) %>%
pivot_wider(names_from = 'clarity', values_from = 'n') %>%
ggplot(aes(x=cut, group = 1))+
geom_col(aes(y='SI2', fill = "cut"))
diamonds %>%
count(cut, clarity) %>%
pivot_wider(names_from = 'clarity', values_from = 'n')
ggplot(aes(x=cut, group = 1))+
geom_col(aes(y='SI2'))
diamonds %>%
count(cut, clarity) %>%
pivot_wider(names_from = 'clarity', values_from = 'n') %>%
ggplot(aes(x=cut, group = 1))+
geom_col(aes(y='SI2'))
diamonds %>%
count(cut, clarity) %>%
pivot_wider(names_from = 'clarity', values_from = 'n') %>%
ggplot(aes(x=cut, group = 1))+
geom_col(aes(y=SI2))
diamonds %>%
count(cut, clarity) %>%
pivot_wider(names_from = 'clarity', values_from = 'n') %>%
ggplot(aes(x=cut, group = 1))+
geom_col(aes(y=SI2))+
geom_col(aes(y=SI2))
diamonds %>%
count(cut, clarity) %>%
pivot_wider(names_from = 'clarity', values_from = 'n') %>%
ggplot(aes(x=cut, group = 1))+
geom_col(aes(y=I1))+
geom_col(aes(y=SI2))
data.frame(
monat = month.name
)
data.frame(
monat = month.name,
jahr = rnrorm(12),
jahr1 = rnorm(12),
jahr2 = rnorm(12),
jahr3 = rnorm(12),
jahr4 = rnorm(12),
jahr5 = rnorm(12),
jahr6 = rnorm(12)
)
data.frame(
monat = month.name,
jahr = rnorm(12),
jahr1 = rnorm(12),
jahr2 = rnorm(12),
jahr3 = rnorm(12),
jahr4 = rnorm(12),
jahr5 = rnorm(12),
jahr6 = rnorm(12)
)
data.frame(
monat = month.name,
jahr = rnorm(12),
jahr1 = rnorm(12),
jahr2 = rnorm(12),
jahr3 = rnorm(12),
jahr4 = rnorm(12),
jahr5 = rnorm(12),
jahr6 = rnorm(12)
) %>% View()
data.frame(
monat = month.name,
jahr = rnorm(12),
jahr1 = rnorm(12),
jahr2 = rnorm(12),
jahr3 = rnorm(12),
jahr4 = rnorm(12),
jahr5 = rnorm(12),
jahr6 = rnorm(12)
) %>% View() %>%
pivot_longer(cols = c("jahr","jahr2", "jahr3", "jahr4", "jahr5", "jahr6"))
data.frame(
monat = month.name,
jahr = rnorm(12),
jahr1 = rnorm(12),
jahr2 = rnorm(12),
jahr3 = rnorm(12),
jahr4 = rnorm(12),
jahr5 = rnorm(12),
jahr6 = rnorm(12)
) %>%
pivot_longer(cols = c("jahr","jahr2", "jahr3", "jahr4", "jahr5", "jahr6")) %>%
View()
data.frame(
monat = month.name,
jahr = rnorm(12),
jahr1 = rnorm(12),
jahr2 = rnorm(12),
jahr3 = rnorm(12),
jahr4 = rnorm(12),
jahr5 = rnorm(12),
jahr6 = rnorm(12)
) %>%
pivot_longer(cols = c("jahr","jahr1","jahr2", "jahr3", "jahr4", "jahr5", "jahr6")) %>%
View()
data.frame(
monat = month.name,
jahr = rnorm(12),
jahr1 = rnorm(12),
jahr2 = rnorm(12),
jahr3 = rnorm(12),
jahr4 = rnorm(12),
jahr5 = rnorm(12),
jahr6 = rnorm(12)
) %>%
# pivot_longer(cols = c("jahr","jahr1","jahr2", "jahr3", "jahr4", "jahr5", "jahr6")) %>%
View()
data.frame(
monat = month.name,
jahr = rnorm(12),
jahr1 = rnorm(12),
jahr2 = rnorm(12),
jahr3 = rnorm(12),
jahr4 = rnorm(12),
jahr5 = rnorm(12),
jahr6 = rnorm(12)
) %>%
pivot_longer(cols = c("jahr","jahr1","jahr2", "jahr3", "jahr4", "jahr5", "jahr6")) %>%
View()
as.character(2011:2021)
runApp('deleteme')
runApp('deleteme')
ggplot2::diamonds %>%
count(cut,clarity) %>%
pivot_longer(cols = 2:8)
ggplot2::diamonds %>%
count(cut,clarity) %>%
as.data.frame() %>%
pivot_longer(cols = 2:8)
ggplot2::diamonds %>%
count(cut,clarity) %>%
as.data.frame()
shiny::runApp('deleteme')
runApp('deleteme')
as.character(format(Sys.Date(), "%Y")-1)
as.character(format(Sys.Date(), "%y")-1)
format(Sys.Date(), "%y")-1
format(Sys.Date(), "%y")
format(Sys.Date(), "%Y")
str(format(Sys.Date(), "%Y"))
format(Sys.Date(), "%Y")-10
as.integer(format(Sys.Date(), "%Y"))-10
as.integer(format(Sys.Date(), "%Y"))-10:as.integer(format(Sys.Date(), "%Y"))
as.integer(format(Sys.Date(), "%Y"))-10
as.integer(format(Sys.Date(), "%Y"))
as.integer(format(Sys.Date(), "%Y")):as.integer(format(Sys.Date(), "%Y"))-10
as.integer(format(Sys.Date(), "%Y")):as.integer(format(Sys.Date(), "%Y"))-10
as.integer(format(Sys.Date(), "%Y")):as.integer(format(Sys.Date(), "%Y"))-10
as.integer(format(Sys.Date(), "%Y"))-10:as.integer(format(Sys.Date(), "%Y"))
2011:2021
first <- as.integer(format(Sys.Date(), "%Y"))-10
last <- :as.integer(format(Sys.Date(), "%Y"))
last <- as.integer(format(Sys.Date(), "%Y"))
first:last
as.integer(format(Sys.Date(), "%Y"))-10:as.integer(format(Sys.Date(), "%Y"))
as.integer(format(Sys.Date(), "%Y"))-10:as.integer(format(Sys.Date(), "%Y"))
first:last
(as.integer(format(Sys.Date(), "%Y"))-10):as.integer(format(Sys.Date(), "%Y"))
years <- c((as.integer(format(Sys.Date(), "%Y"))-10):as.integer(format(Sys.Date(), "%Y")))
years <- as.character((as.integer(format(Sys.Date(), "%Y"))-10):as.integer(format(Sys.Date(), "%Y")))
runApp('deleteme')
jahrs <- c("jahr", "jahr1", "jahr2", "jahr3", "jahr4", "jahr5", "jahr6", "jahr7", "jahr8", "jahr9")
data.frame(
jahrs <- c("jahr", "jahr1", "jahr2", "jahr3", "jahr4", "jahr5", "jahr6", "jahr7", "jahr8", "jahr9"),
years = as.character((as.integer(format(Sys.Date(), "%Y"))-10):as.integer(format(Sys.Date(), "%Y")))
)
data.frame(
jahrs <- c("jahr", "jahr1", "jahr2", "jahr3", "jahr4", "jahr5", "jahr6", "jahr7", "jahr8", "jahr9"),
years = as.character((as.integer(format(Sys.Date(), "%Y"))-9):as.integer(format(Sys.Date(), "%Y")))
)
data.frame(
jahrs = c("jahr", "jahr1", "jahr2", "jahr3", "jahr4", "jahr5", "jahr6", "jahr7", "jahr8", "jahr9"),
years = as.character((as.integer(format(Sys.Date(), "%Y"))-9):as.integer(format(Sys.Date(), "%Y")))
)
dates <- data.frame(
jahrs = c("jahr", "jahr1", "jahr2", "jahr3", "jahr4", "jahr5", "jahr6", "jahr7", "jahr8", "jahr9"),
years = as.character((as.integer(format(Sys.Date(), "%Y"))-9):as.integer(format(Sys.Date(), "%Y")))
)
dates <- data.frame(
jahrs = c("jahr", "jahr1", "jahr2", "jahr3", "jahr4", "jahr5", "jahr6", "jahr7", "jahr8", "jahr9", "jahr10"),
years = as.character((as.integer(format(Sys.Date(), "%Y"))-10):as.integer(format(Sys.Date(), "%Y")))
)
dates
dates <- data.frame(
jahrs = c("jahr10", "jahr9", "jahr8", "jahr7", "jahr6", "jahr5", "jahr4", "jahr3", "jahr2", "jahr1", "jahr"),
years = as.character((as.integer(format(Sys.Date(), "%Y"))-10):as.integer(format(Sys.Date(), "%Y")))
)
dates
dates <- data.frame(
name = c("jahr10", "jahr9", "jahr8", "jahr7", "jahr6", "jahr5", "jahr4", "jahr3", "jahr2", "jahr1", "jahr"),
year = as.character((as.integer(format(Sys.Date(), "%Y"))-10):as.integer(format(Sys.Date(), "%Y")))
)
dates
View(df)
data.frame(
monat = month.name,
jahr = rnorm(12),
jahr1 = rnorm(12),
jahr2 = rnorm(12),
jahr3 = rnorm(12),
jahr4 = rnorm(12),
jahr5 = rnorm(12),
jahr6 = rnorm(12),
jahr7 = rnorm(12),
jahr8 = rnorm(12),
jahr9 = rnorm(12),
jahr10 = rnorm(12)
) %>%
pivot_longer(cols = 2:11)
df <- data.frame(
monat = month.name,
jahr = rnorm(12),
jahr1 = rnorm(12),
jahr2 = rnorm(12),
jahr3 = rnorm(12),
jahr4 = rnorm(12),
jahr5 = rnorm(12),
jahr6 = rnorm(12),
jahr7 = rnorm(12),
jahr8 = rnorm(12),
jahr9 = rnorm(12),
jahr10 = rnorm(12)
) %>%
pivot_longer(cols = 2:11)
df
data.frame(
monat = month.name,
jahr = rnorm(12),
jahr1 = rnorm(12),
jahr2 = rnorm(12),
jahr3 = rnorm(12),
jahr4 = rnorm(12),
jahr5 = rnorm(12),
jahr6 = rnorm(12),
jahr7 = rnorm(12),
jahr8 = rnorm(12),
jahr9 = rnorm(12),
jahr10 = rnorm(12)
) %>%
pivot_longer(cols = 2:11) %>%
left_join(dates)
data.frame(
monat = month.name,
jahr = rnorm(12),
jahr1 = rnorm(12),
jahr2 = rnorm(12),
jahr3 = rnorm(12),
jahr4 = rnorm(12),
jahr5 = rnorm(12),
jahr6 = rnorm(12),
jahr7 = rnorm(12),
jahr8 = rnorm(12),
jahr9 = rnorm(12),
jahr10 = rnorm(12)
) %>%
pivot_longer(cols = 2:11) %>%
left_join(dates, by = "name")
dates <- data.frame(
name = c("jahr10", "jahr9", "jahr8", "jahr7", "jahr6", "jahr5", "jahr4", "jahr3", "jahr2", "jahr1", "jahr"),
year = as.character((as.integer(format(Sys.Date(), "%Y"))-10):as.integer(format(Sys.Date(), "%Y")))
)
data.frame(
monat = month.name,
jahr = rnorm(12),
jahr1 = rnorm(12),
jahr2 = rnorm(12),
jahr3 = rnorm(12),
jahr4 = rnorm(12),
jahr5 = rnorm(12),
jahr6 = rnorm(12),
jahr7 = rnorm(12),
jahr8 = rnorm(12),
jahr9 = rnorm(12),
jahr10 = rnorm(12)
) %>%
pivot_longer(cols = 2:21) %>%
left_join(dates, by = "name")
data.frame(
monat = month.name,
jahr = rnorm(12),
jahr1 = rnorm(12),
jahr2 = rnorm(12),
jahr3 = rnorm(12),
jahr4 = rnorm(12),
jahr5 = rnorm(12),
jahr6 = rnorm(12),
jahr7 = rnorm(12),
jahr8 = rnorm(12),
jahr9 = rnorm(12),
jahr10 = rnorm(12)
) %>%
pivot_longer(cols = 2:12) %>%
left_join(dates, by = "name")
install.packages(c("arm", "audio", "backports", "bayestestR", "bnclassify", "brio", "broom", "bslib", "cachem", "car", "caret", "cli", "coin", "conquer", "corpcor", "corrplot", "cpp11", "crayon", "credentials", "crosstalk", "data.table", "datamods", "datawizard", "deldir", "dendextend", "desc", "DescTools", "devtools", "diffobj", "digest", "DT", "dtplyr", "e1071", "effectsize", "emmeans", "EMT", "entropy", "Exact", "exactRankTests", "fdrtool", "fs", "future", "generics", "gert", "ggsignif", "git2r", "gld", "glmnet", "glue", "graphlayouts", "gsl", "h2o", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "igraph", "influenceR", "insight", "ipred", "jtools", "knitr", "later", "lava", "libcoin", "lifecycle", "lmtest", "lubridate", "maptools", "matrixStats", "MBESS", "mclust", "memoise", "mice", "mime", "mitml", "mvtnorm", "nloptr", "odbc", "OpenMx", "openssl", "padr", "parallelly", "parameters", "pbapply", "pbdZMQ", "performance", "pillar", "pkgbuild", "pkgload", "plotly", "plotrix", "pracma", "pROC", "psych", "qgraph", "qualtRics", "R.utils", "R6", "raster", "rcmdcheck", "rcompanion", "RcppArmadillo", "RCurl", "readr", "recipes", "remotes", "rex", "rgdal", "rgeos", "rgexf", "RGtk2", "rio", "RJSONIO", "rlang", "rmarkdown", "robustbase", "RODBC", "rootSolve", "roxygen2", "rpf", "rsample", "rsconnect", "RSQLite", "rvest", "s2", "sem", "servr", "sessioninfo", "sf", "shiny", "shinydashboard", "shinyWidgets", "showtext", "simstudy", "sjmisc", "sjPlot", "slam", "sp", "spData", "spdep", "stationery", "stringi", "styler", "sysfonts", "systemfonts", "testthat", "TH.data", "tibble", "tidygeocoder", "tidyr", "tiff", "timetk", "TMB", "tseries", "tzdb", "usethis", "uuid", "V8", "viridis", "visNetwork", "vroom", "waldo", "websocket", "withr", "xfun", "xgboost", "XML", "xml2", "yardstick"))
install.packages("bslib")
remove.packages("htmltools", lib="~/R/win-library/4.1")
install.packages("htmltools")
remove.packages("bslib", lib="~/R/win-library/4.1")
install.packages("bslib")
shiny::runApp('testes')
